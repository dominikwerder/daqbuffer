use super::binnedjson::ScalarEventsResponse;
use super::events::get_plain_events_json;
use crate::nodes::require_archapp_test_host_running;
use err::Error;
use netpod::f64_close;
use netpod::log::*;

#[test]
fn get_events_1() -> Result<(), Error> {
    let fut = async {
        let rh = require_archapp_test_host_running()?;
        let cluster = &rh.cluster;
        let res = get_plain_events_json(
            "SARUN16-MQUA080:X",
            "2021-01-04T00:00:00Z",
            "2021-01-30T00:00:00Z",
            cluster,
            true,
            4,
        )
        .await?;
        let res: ScalarEventsResponse = serde_json::from_value(res)?;
        info!("RESULT: {res:?}");
        let ts_anchor = 1609763681;
        let ts_ms = vec![
            617, 2569805, 2936041, 3010344, 3049906, 3708678, 5909539, 6477893, 6610677, 6758112, 71757772, 786724766,
            1308470149, 1890757180, 1915078958, 1915194844, 1915194947, 1915362469, 1915362571, 1915417056, 1915465737,
            1915520190, 1915520293, 1915571058, 1915805484, 1915805589, 1915965029, 1915965133, 1916031220, 1916031324,
            1916082787, 1916082889, 1916157130, 1916157233, 1916345254, 1916345356, 1916488147, 1916513221, 1916620067,
            1916620173, 1916672379, 1916693598, 1916723207, 1916723309, 1916745319, 1916745420, 1916775502, 1916775609,
        ];
        let ts_ns = vec![
            584454, 368902, 427972, 160693, 58866, 902958, 192718, 479215, 450894, 681257, 19499, 84254, 273548,
            721894, 78541, 169037, 501222, 573798, 341840, 736887, 939637, 906430, 566278, 630241, 189349, 565614,
            447258, 899381, 129461, 21285, 901927, 791954, 915058, 435737, 379707, 850017, 251317, 283772, 869783,
            687797, 556662, 527206, 790635, 502581, 307019, 218006, 121460, 750763,
        ];
        let values = vec![
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.25704250552462327,
            -0.22139999999990323,
            -0.22139999999990323,
            -0.20710000000008225,
            -0.20710000000008225,
            -0.20714250552464364,
            -0.20704250552444137,
            -0.1999999999998181,
            -0.1999999999998181,
            -0.2001425055245818,
            -0.1999999999998181,
            -0.1999999999998181,
            -0.1950000000001637,
            -0.1950000000001637,
            -0.20499999999992724,
            -0.20499999999992724,
            -0.2100000000000364,
            -0.2100000000000364,
            -0.2199999999997999,
            -0.2199999999997999,
            -0.2300000000000182,
            -0.2300000000000182,
            -0.22994250552437737,
            -0.22994250552437737,
            -0.2300000000000182,
            -0.2300000000000182,
            -0.2300425055245796,
            -0.22994250552437737,
            -0.2157000000001972,
            -0.2157000000001972,
            -0.2015000000001237,
            -0.2015000000001237,
            -0.2015000000001237,
            -0.2015000000001237,
        ];
        assert_eq!(res.ts_anchor, ts_anchor);
        assert_eq!(&res.ts_ms, &ts_ms);
        assert_eq!(&res.ts_ns, &ts_ns);
        for (_i, (&a, &b)) in res.values.iter().zip(values.iter()).enumerate() {
            assert!(f64_close(a, b));
        }
        Ok(())
    };
    taskrun::run(fut)
}
